#include <stdio.h>


//white=0 yellow=1 blue=2 green=3 red=4 orange=5
typedef struct cube
{
	int down[3][3], up[3][3], front[3][3], back[3][3], right[3][3], left[3][3];
}Cube;
 Cube CU;
 int flag = 0;
 int operate[300] = { 0 };
 int clockwise_angle_div90[300] = { 0 };

 void checkcube() {
	 printf("%d\t%d\t%d\n%d\t%d\t%d\n%d\t%d\t%d\n", CU.down[0][0], CU.down[0][1], CU.down[0][2], CU.down[1][0], CU.down[1][1], CU.down[1][2], CU.down[2][0], CU.down[2][1], CU.down[2][2]);
	 printf("%d\t%d\t%d\n%d\t%d\t%d\n%d\t%d\t%d\n", CU.up[0][0], CU.up[0][1], CU.up[0][2], CU.up[1][0], CU.up[1][1], CU.up[1][2], CU.up[2][0], CU.up[2][1], CU.up[2][2]);
	 printf("%d\t%d\t%d\n%d\t%d\t%d\n%d\t%d\t%d\n", CU.front[0][0], CU.front[0][1], CU.front[0][2], CU.front[1][0], CU.front[1][1], CU.front[1][2], CU.front[2][0], CU.front[2][1], CU.front[2][2]);
	 printf("%d\t%d\t%d\n%d\t%d\t%d\n%d\t%d\t%d\n", CU.back[0][0], CU.back[0][1], CU.back[0][2], CU.back[1][0], CU.back[1][1], CU.back[1][2], CU.back[2][0], CU.back[2][1], CU.back[2][2]);
	 printf("%d\t%d\t%d\n%d\t%d\t%d\n%d\t%d\t%d\n", CU.right[0][0], CU.right[0][1], CU.right[0][2], CU.right[1][0], CU.right[1][1], CU.right[1][2], CU.right[2][0], CU.right[2][1], CU.right[2][2]);
	 printf("%d\t%d\t%d\n%d\t%d\t%d\n%d\t%d\t%d\n", CU.left[0][0], CU.left[0][1], CU.left[0][2], CU.left[1][0], CU.left[1][1], CU.left[1][2], CU.left[2][0], CU.left[2][1], CU.left[2][2]);
	 return;
 }
//*char solvecube(){}
void P_D() { printf("D "); operate[flag] = 1; clockwise_angle_div90[flag] = 1; flag++; return; }
void P_U() { printf("U "); operate[flag] = 2; clockwise_angle_div90[flag] = 1; flag++; return; }
void P_F() { printf("F "); operate[flag] = 3; clockwise_angle_div90[flag] = 1; flag++; return; }
void P_B() { printf("B "); operate[flag] = 4; clockwise_angle_div90[flag] = 1; flag++; return; }
void P_R() { printf("R "); operate[flag] = 5; clockwise_angle_div90[flag] = 1; flag++; return; }
void P_L() { printf("L "); operate[flag] = 6; clockwise_angle_div90[flag] = 1; flag++; return; }

void P_D2() { printf("D2 "); operate[flag] = 1; clockwise_angle_div90[flag] = 2; flag++; return; }
void P_U2() { printf("U2 "); operate[flag] = 2; clockwise_angle_div90[flag] = 2; flag++; return; }
void P_F2() { printf("F2 "); operate[flag] = 3; clockwise_angle_div90[flag] = 2; flag++; return; }
void P_B2() { printf("B2 "); operate[flag] = 4; clockwise_angle_div90[flag] = 2; flag++; return; }
void P_R2() { printf("R2 "); operate[flag] = 5; clockwise_angle_div90[flag] = 2; flag++; return; }
void P_L2() { printf("L2 "); operate[flag] = 6; clockwise_angle_div90[flag] = 2; flag++; return; }

void P_ANTI_D() { printf("ANTI_D "); operate[flag] = 1; clockwise_angle_div90[flag] = 3; flag++; return; }
void P_ANTI_U() { printf("ANTI_U "); operate[flag] = 2; clockwise_angle_div90[flag] = 3; flag++; return; }
void P_ANTI_F() { printf("ANTI_F "); operate[flag] = 3; clockwise_angle_div90[flag] = 3; flag++; return; }
void P_ANTI_B() { printf("ANTI_B "); operate[flag] = 4; clockwise_angle_div90[flag] = 3; flag++; return; }
void P_ANTI_R() { printf("ANTI_R "); operate[flag] = 5; clockwise_angle_div90[flag] = 3; flag++; return; }
void P_ANTI_L() { printf("ANTI_L "); operate[flag] = 6; clockwise_angle_div90[flag] = 3; flag++; return; }

void D() {
	Cube temp;
	temp = CU;
	temp.front[2][0] = CU.left[2][0];
	temp.front[2][1] = CU.left[2][1];
	temp.front[2][2] = CU.left[2][2];
	temp.left[2][0] = CU.back[2][0];
	temp.left[2][1] = CU.back[2][1];
	temp.left[2][2] = CU.back[2][2];
	temp.back[2][0] = CU.right[2][0];
	temp.back[2][1] = CU.right[2][1];
	temp.back[2][2] = CU.right[2][2];
	temp.right[2][0] = CU.front[2][0];
	temp.right[2][1] = CU.front[2][1];
	temp.right[2][2] = CU.front[2][2];
	temp.down[0][0] = CU.down[2][0];
	temp.down[0][1] = CU.down[1][0];
	temp.down[0][2] = CU.down[0][0];
	temp.down[1][0] = CU.down[2][1];
	temp.down[1][2] = CU.down[0][1];
	temp.down[2][0] = CU.down[2][2];
	temp.down[2][1] = CU.down[1][2];
	temp.down[2][2] = CU.down[0][2];

	CU = temp;
	return;

}

void U() {
	Cube temp;
	temp = CU;
	temp.front[0][0] = CU.right[0][0];
	temp.front[0][1] = CU.right[0][1];
	temp.front[0][2] = CU.right[0][2];
	temp.left[0][0] = CU.front[0][0];
	temp.left[0][1] = CU.front[0][1];
	temp.left[0][2] = CU.front[0][2];
	temp.back[0][0] = CU.left[0][0];
	temp.back[0][1] = CU.left[0][1];
	temp.back[0][2] = CU.left[0][2];
	temp.right[0][0] = CU.back[0][0];
	temp.right[0][1] = CU.back[0][1];
	temp.right[0][2] = CU.back[0][2];
	temp.up[0][0] = CU.up[2][0];
	temp.up[0][1] = CU.up[1][0];
	temp.up[0][2] = CU.up[0][0];
	temp.up[1][0] = CU.up[2][1];
	temp.up[1][2] = CU.up[0][1];
	temp.up[2][0] = CU.up[2][2];
	temp.up[2][1] = CU.up[1][2];
	temp.up[2][2] = CU.up[0][2];

	CU = temp;
	return;


}

void F() {
	Cube temp;
	temp = CU;
	temp.left[0][2] = CU.down[0][0];
	temp.left[1][2] = CU.down[0][1];
	temp.left[2][2] = CU.down[0][2];
	temp.up[2][0] = CU.left[2][2];
	temp.up[2][1] = CU.left[1][2];
	temp.up[2][2] = CU.left[0][2];
	temp.right[0][0] = CU.up[2][0];
	temp.right[1][0] = CU.up[2][1];
	temp.right[2][0] = CU.up[2][2];
	temp.down[0][0] = CU.right[2][0];
	temp.down[0][1] = CU.right[1][0];
	temp.down[0][2] = CU.right[0][0];
	temp.front[0][0] = CU.front[2][0];
	temp.front[0][1] = CU.front[1][0];
	temp.front[0][2] = CU.front[0][0];
	temp.front[1][0] = CU.front[2][1];
	temp.front[1][2] = CU.front[0][1];
	temp.front[2][0] = CU.front[2][2];
	temp.front[2][1] = CU.front[1][2];
	temp.front[2][2] = CU.front[0][2];

	CU = temp;
	return;

}

void B() {
	Cube temp;
	temp = CU;
	temp.left[0][0] = CU.up[0][2];
	temp.left[1][0] = CU.up[0][1];
	temp.left[2][0] = CU.up[0][0];
	temp.up[0][0] = CU.right[0][2];
	temp.up[0][1] = CU.right[1][2];
	temp.up[0][2] = CU.right[2][2];
	temp.right[0][2] = CU.down[2][2];
	temp.right[1][2] = CU.down[2][1];
	temp.right[2][2] = CU.down[2][0];
	temp.down[2][0] = CU.left[0][0];
	temp.down[2][1] = CU.left[1][0];
	temp.down[2][2] = CU.left[2][0];
	temp.back[0][0] = CU.back[2][0];
	temp.back[0][1] = CU.back[1][0];
	temp.back[0][2] = CU.back[0][0];
	temp.back[1][0] = CU.back[2][1];
	temp.back[1][2] = CU.back[0][1];
	temp.back[2][0] = CU.back[2][2];
	temp.back[2][1] = CU.back[1][2];
	temp.back[2][2] = CU.back[0][2];

	CU = temp;
	return;

}

void R() {
	Cube temp;
	temp = CU;
	temp.front[0][2] = CU.down[0][2];
	temp.front[1][2] = CU.down[1][2];
	temp.front[2][2] = CU.down[2][2];
	temp.down[0][2] = CU.back[2][0];
	temp.down[1][2] = CU.back[1][0];
	temp.down[2][2] = CU.back[0][0];
	temp.back[0][0] = CU.up[2][2];
	temp.back[1][0] = CU.up[1][2];
	temp.back[2][0] = CU.up[0][2];
	temp.up[0][2] = CU.front[0][2];
	temp.up[1][2] = CU.front[1][2];
	temp.up[2][2] = CU.front[2][2];
	temp.right[0][0] = CU.right[2][0];
	temp.right[0][1] = CU.right[1][0];
	temp.right[0][2] = CU.right[0][0];
	temp.right[1][0] = CU.right[2][1];
	temp.right[1][2] = CU.right[0][1];
	temp.right[2][0] = CU.right[2][2];
	temp.right[2][1] = CU.right[1][2];
	temp.right[2][2] = CU.right[0][2];

	CU = temp;
	return;

}

void L() {
	Cube temp;
	temp = CU;
	temp.front[0][0] = CU.up[0][0];
	temp.front[1][0] = CU.up[1][0];
	temp.front[2][0] = CU.up[2][0];
	temp.down[0][0] = CU.front[0][0];
	temp.down[1][0] = CU.front[1][0];
	temp.down[2][0] = CU.front[2][0];
	temp.back[0][2] = CU.down[2][0];
	temp.back[1][2] = CU.down[1][0];
	temp.back[2][2] = CU.down[0][0];
	temp.up[0][0] = CU.back[2][2];
	temp.up[1][0] = CU.back[1][2];
	temp.up[2][0] = CU.back[0][2];
	temp.left[0][0] = CU.left[2][0];
	temp.left[0][1] = CU.left[1][0];
	temp.left[0][2] = CU.left[0][0];
	temp.left[1][0] = CU.left[2][1];
	temp.left[1][2] = CU.left[0][1];
	temp.left[2][0] = CU.left[2][2];
	temp.left[2][1] = CU.left[1][2];
	temp.left[2][2] = CU.left[0][2];

	CU = temp;
	return;

}

void D2() {
	D();
	D();
	return;
}
void U2(){
	U();
	U();
	return;
}
void F2() {
	F();
	F();
	return;
}
void B2(){
	B();
	B();
	return;
}
void R2(){
	R();
	R();
	return;
}
void L2(){
	L();
	L();
	return;
}

void ANTI_D() {
	D();
	D();
	D();
	return;
}
void ANTI_U(){
	U();
	U();
	U();
	return;
}
void ANTI_F(){
	F();
	F();
	F();
	return;
}
void ANTI_B(){
	B();
	B();
	B();
	return;
}
void ANTI_R(){
    R();
    R();
    R();
    return;
 }
void ANTI_L(){
	L();
	L();
	L();
	return;
}

void down_cross() {
	//step 1 white-blue
	//case 1 white is in surface down
	if ((CU.down[0][1] == 0) && (CU.front[2][1] == 2)) { ; }//²»×ö²Ù×÷
	else	if ((CU.down[1][0] == 0) && (CU.left[2][1] == 2)) { D(); P_D(); }
	else	if ((CU.down[1][2] == 0) && (CU.right[2][1] == 2)) { ANTI_D(); P_ANTI_D(); }
	else	if ((CU.down[2][1] == 0) && (CU.back[2][1] == 2)) { D2(); P_D2(); }
	//case 2 white is in surface up
	else	if ((CU.up[0][1] == 0) && (CU.back[0][1] == 2)) { U2(); F2(); P_U2(); P_F2();}
	else	if ((CU.up[1][0] == 0) && (CU.left[0][1] == 2)) { ANTI_U(); F2(); P_ANTI_U(); P_F2();}
	else	if ((CU.up[1][2] == 0) && (CU.right[0][1] == 2)) { U(); F2(); P_U();P_F2();}
	else	if ((CU.up[2][1] == 0) && (CU.front[0][1] == 2)) { F2(); P_F2();}
		//case 3 white is in surface f,r,b,l
	else	if ((CU.front[0][1] == 0) && (CU.up[2][1] == 2)) { U(); L(); ANTI_F(); P_U(); P_L(); P_ANTI_F();}
	else	if ((CU.right[0][1] == 0) && (CU.up[1][2] == 2)) { ANTI_R(); F(); P_ANTI_R(); P_F();}
	else	if ((CU.back[0][1] == 0) && (CU.up[0][1] == 2)) { U(); ANTI_R(); F(); P_U(); P_ANTI_R(); P_F();}
	else	if ((CU.left[0][1] == 0) && (CU.up[1][0] == 2)) { L(); ANTI_F(); P_L(); P_ANTI_F();}


	else	if ((CU.front[2][1] == 0) && (CU.down[0][1] == 2)) { D(); R(); F(); P_D(); P_R(); P_F();}
	else	if ((CU.right[2][1] == 0) && (CU.down[1][2] == 2)) { R(); F(); P_R(); P_F();}
	else	if ((CU.back[2][1] == 0) && (CU.down[2][1] == 2)) { D(); ANTI_L(); ANTI_F(); P_D(); P_ANTI_L(); P_ANTI_F();}
	else	if ((CU.left[2][1] == 0) && (CU.down[1][0] == 2)) { ANTI_L(); ANTI_F(); P_ANTI_L(); P_ANTI_F();}

	else	if ((CU.front[1][0] == 0) && (CU.left[1][2] == 2)) { L(); D(); P_L(); P_D();}
	else	if ((CU.right[1][0] == 0) && (CU.front[1][2] == 2)) { F(); P_F();}
	else	if ((CU.back[1][0] == 0) && (CU.right[1][2] == 2)) { R(); ANTI_D(); P_R(); P_ANTI_D();}
	else	if ((CU.left[1][0] == 0) && (CU.back[1][2] == 2)) { B(); D2(); P_B(); P_D2();}

	else	if ((CU.front[1][2] == 0) && (CU.right[1][0] == 2)) { ANTI_R(); ANTI_D(); P_ANTI_R(); P_ANTI_D();}
	else	if ((CU.right[1][2] == 0) && (CU.back[1][0] == 2)) { ANTI_B(); D2(); P_ANTI_B(); P_D2();}
	else	if ((CU.back[1][2] == 0) && (CU.left[1][0] == 2)) { ANTI_L(); D(); P_ANTI_L(); P_D();}
	else	if ((CU.left[1][2] == 0) && (CU.front[1][0] == 2)) { ANTI_F(); P_ANTI_F();}

		//step 2 white-green
	if ((CU.down[1][0] == 0) && (CU.left[2][1] == 3)) { L2(); U(); B2(); P_L2(); P_U(); P_B2();}
	else	if ((CU.down[1][2] == 0) && (CU.right[2][1] == 3)) { R2(); ANTI_U(); B2(); P_R2(); P_ANTI_U(); P_B2();}
	else	if ((CU.down[2][1] == 0) && (CU.back[2][1] == 3)) { ; }
	    
	    
	else	if ((CU.up[0][1] == 0) && (CU.back[0][1] == 3)) { B2(); P_B2();}
	else	if ((CU.up[1][0] == 0) && (CU.left[0][1] == 3)) { U(); B2(); P_U(); P_B2();}
	else	if ((CU.up[1][2] == 0) && (CU.right[0][1] == 3)) { ANTI_U(); B2(); P_ANTI_U(); P_B2();}
	else	if ((CU.up[2][1] == 0) && (CU.front[0][1] == 3)) { U2(); B2(); P_U2(); P_B2();}

	else	if ((CU.front[0][1] == 0) && (CU.up[2][1] == 3)) { ANTI_U(); R(); ANTI_B(); P_ANTI_U(); P_R(); P_ANTI_B();}
	else	if ((CU.right[0][1] == 0) && (CU.up[1][2] == 3)) { R(); ANTI_B(); P_R(); P_ANTI_B();}
	else	if ((CU.back[0][1] == 0) && (CU.up[0][1] == 3))  {U(); R(); ANTI_B(); P_U(); P_R(); P_ANTI_B();}
	else	if ((CU.left[0][1] == 0) && (CU.up[1][0] == 3)) { ANTI_L(); B(); P_ANTI_L(); P_B();}

	else	if ((CU.right[2][1] == 0) && (CU.down[1][2] == 3)) { ANTI_R(); ANTI_B();P_ANTI_R(); P_ANTI_B();}
	else	if ((CU.back[2][1] == 0) && (CU.down[2][1] == 3)) { B2(); U(); R(); ANTI_B(); P_B2(); P_U(); P_R(); P_ANTI_B();}
	else	if ((CU.left[2][1] == 0) && (CU.down[1][0] == 3)) { L(); B(); P_L(); P_B();}

	else	if ((CU.front[1][0] == 0) && (CU.left[1][2] == 3)) { ANTI_L(); U(); B2(); P_ANTI_L(); P_U(); P_B2();}
	else	if ((CU.right[1][0] == 0) && (CU.front[1][2] == 3)) { D2(); F(); D2(); P_D2(); P_F(); P_D2();}
	else	if ((CU.back[1][0] == 0) && (CU.right[1][2] == 3)) { ANTI_R(); ANTI_U(); B2(); P_ANTI_R(); P_ANTI_U(); P_B2();}
	else	if ((CU.left[1][0] == 0) && (CU.back[1][2] == 3)) { B();P_B();}

	else	if ((CU.front[1][2] == 0) && (CU.right[1][0] == 3)) { R(); ANTI_U(); B2(); P_R(); P_ANTI_U(); P_B2();}
	else	if ((CU.right[1][2] == 0) && (CU.back[1][0] == 3)) { ANTI_B(); P_ANTI_B();}
	else	if ((CU.back[1][2] == 0) && (CU.left[1][0] == 3)) { L(); U(); B2(); P_L(); P_U(); P_B2();}
	else	if ((CU.left[1][2] == 0) && (CU.front[1][0] == 3)) { D2(); ANTI_F(); D2(); P_D2(); P_ANTI_F(); P_D2();}
		 
	    //step 3 white-red
	if ((CU.down[1][0] == 0) && (CU.left[2][1] == 4)) { L2(); U2(); R2(); P_L2(); P_U2(); P_R2();}
	else if ((CU.down[1][2] == 0) && (CU.right[2][1] == 4)) { ; }
		


	else if ((CU.up[0][1] == 0) && (CU.back[0][1] == 4)) { U(); R2(); P_U(); P_R2();}
	else if ((CU.up[1][0] == 0) && (CU.left[0][1] == 4)) { U2(); R2(); P_U2(); P_R2();}
	else if ((CU.up[1][2] == 0) && (CU.right[0][1] == 4)) { R2(); P_R2();}
	else if ((CU.up[2][1] == 0) && (CU.front[0][1] == 4)) { ANTI_U(); R2(); P_ANTI_U(); P_R2();}

	else if ((CU.front[0][1] == 0) && (CU.up[2][1] == 4)) { F(); ANTI_R(); ANTI_F(); P_F(); P_ANTI_R(); P_ANTI_F();}
	else if ((CU.right[0][1] == 0) && (CU.up[1][2] == 4)) { U(); F(); ANTI_R(); ANTI_F(); P_U(); P_F(); P_ANTI_R(); P_ANTI_F();}
	else if ((CU.back[0][1] == 0) && (CU.up[0][1] == 4)) { ANTI_B(); R(); B(); P_ANTI_B(); P_R(); P_B();}
	else if ((CU.left[0][1] == 0) && (CU.up[1][0] == 4)) { U(); ANTI_B(); R(); B(); U(); P_ANTI_B(); P_R(); P_B();}

	else if ((CU.right[2][1] == 0) && (CU.down[1][2] == 4)) { R2(); U(); F(); ANTI_R(); ANTI_F(); P_R2(); P_U(); P_F(); P_ANTI_R(); P_ANTI_F();}
	else if ((CU.left[2][1] == 0) && (CU.down[1][0] == 4)) { L2(); U(); ANTI_B(); R(); B(); P_L2(); P_U(); P_ANTI_B(); P_R(); P_B();}

	else if ((CU.front[1][0] == 0) && (CU.left[1][2] == 4)) { ANTI_L(); U2(); R2(); P_ANTI_L(); P_U2(); P_R2();}
	else if ((CU.right[1][0] == 0) && (CU.front[1][2] == 4)) { ANTI_D(); F(); D(); P_ANTI_D(); P_F(); P_D();}
	else if ((CU.back[1][0] == 0) && (CU.right[1][2] == 4)) { R(); P_R();}
	else if ((CU.left[1][0] == 0) && (CU.back[1][2] == 4)) { D(); B(); ANTI_D(); P_D(); P_B(); P_ANTI_D();}

	else if ((CU.front[1][2] == 0) && (CU.right[1][0] == 4)) { ANTI_R(); P_ANTI_R();}
	else if ((CU.right[1][2] == 0) && (CU.back[1][0] == 4)) { D(); ANTI_B(); ANTI_D(); P_D(); P_ANTI_B(); P_ANTI_D(); }
	else if ((CU.back[1][2] == 0) && (CU.left[1][0] == 4)) { L(); U2(); R2(); P_L(); P_U2(); P_R2();}
	else if ((CU.left[1][2] == 0) && (CU.front[1][0] == 4)) { ANTI_D(); ANTI_F(); D(); P_ANTI_D(); P_ANTI_F(); P_D();}
 
		//step 4 white-orange
	if ((CU.down[1][0] == 0) && (CU.left[2][1] == 5)) { ; }

	else if ((CU.up[0][1] == 0) && (CU.back[0][1] == 5)) { ANTI_U(); L2(); P_ANTI_U(); P_L2();}
	else if ((CU.up[1][0] == 0) && (CU.left[0][1] == 5)) { L2(); P_L2();}
	else if ((CU.up[1][2] == 0) && (CU.right[0][1] == 5)) { U2(); L2(); P_U2(); P_L2();}
	else if ((CU.up[2][1] == 0) && (CU.front[0][1] == 5)) { U(); L2(); P_U(); P_L2();}

	else if ((CU.front[0][1] == 0) && (CU.up[2][1] == 5)) { ANTI_F(); B(); L(); F(); ANTI_B(); P_ANTI_F(); P_B(); P_L(); P_F(); P_ANTI_B();}
	else if ((CU.right[0][1] == 0) && (CU.up[1][2] == 5)) { U(); ANTI_F(); B(); L(); F(); ANTI_B(); P_U(); P_ANTI_F(); P_B(); P_L(); P_F(); P_ANTI_B();}
	else if ((CU.back[0][1] == 0) && (CU.up[0][1] == 5)) { U2(); ANTI_F(); B(); L(); F(); ANTI_B(); P_U2(); P_ANTI_F(); P_B(); P_L(); P_F(); P_ANTI_B();}
	else if ((CU.left[0][1] == 0) && (CU.up[1][0] == 5)) { ANTI_U(); ANTI_F(); B(); L(); F(); ANTI_B(); P_ANTI_U(); P_ANTI_F(); P_B(); P_L();P_F(); P_ANTI_B();}

	else if ((CU.left[2][1] == 0) && (CU.down[1][0] == 5)) { L(); ANTI_D(); B(); D(); P_L(); P_ANTI_D(); P_B(); P_D();}

	else if ((CU.front[1][0] == 0) && (CU.left[1][2] == 5)) { L(); P_L();}
	else if ((CU.right[1][0] == 0) && (CU.front[1][2] == 5)) { D(); F(); ANTI_D(); P_D(); P_F(); P_ANTI_D();}
	else if ((CU.back[1][0] == 0) && (CU.right[1][2] == 5)) { D2(); R(); D2(); P_D2(); P_R(); P_D2();}
	else if ((CU.left[1][0] == 0) && (CU.back[1][2] == 5)) { ANTI_D(); B(); D(); P_ANTI_D(); P_B(); P_D();}

	else if ((CU.front[1][2] == 0) && (CU.right[1][0] == 5)) { D2(); ANTI_R(); D2(); P_D2(); P_ANTI_R(); P_D2();}
	else if ((CU.right[1][2] == 0) && (CU.back[1][0] == 5)) { ANTI_D(); ANTI_B(); D(); P_ANTI_D(); P_ANTI_B(); P_D();}
	else if ((CU.back[1][2] == 0) && (CU.left[1][0] == 5)) { ANTI_L(); P_ANTI_L();}
	else if ((CU.left[1][2] == 0) && (CU.front[1][0] == 5)) {D(); ANTI_F(); ANTI_D(); P_D(); P_ANTI_F(); P_ANTI_D();}
		//CHECK CUBE


	return;


}
void completedown() {
	
	//step0 find all white corner by white=0
	int flag_corner[9] = { 0 };
	int color_corner[4] = { 0 };//in order bwr bwo gwr gwo
	int i;
	int j = 0;
	/*each corner's place: 
	1:up-left-back
	2:up-right-back
	3:up-left-front
	4:up-right-front
	5:down-left-back
	6:down-right-back
	7:down-left-front
	8:down-right-front
	*/
	if (CU.up[0][0] * CU.back[0][2] * CU.left[0][0] == 0) { flag_corner[1] = 1; }
	if (CU.up[0][2] * CU.back[0][0] * CU.right[0][2] == 0) { flag_corner[2] = 1; }
	if (CU.up[2][0] * CU.front[0][0] * CU.left[0][2] == 0) { flag_corner[3] = 1; }
	if (CU.up[2][2] * CU.front[0][2] * CU.right[0][0] == 0) { flag_corner[4] = 1; }
	if (CU.down[2][0] * CU.back[2][2] * CU.left[2][0] == 0) { flag_corner[5] = 1; }
	if (CU.down[2][2] * CU.back[2][0] * CU.right[2][2] == 0) { flag_corner[6] = 1; }
	if (CU.down[0][0] * CU.front[2][0] * CU.left[2][2] == 0) { flag_corner[7] = 1; }
	if (CU.down[0][2] * CU.front[2][2] * CU.right[2][0] == 0) { flag_corner[8] = 1; }

	/*for (i = 1; i++; i <= 8)
	{
		if (flag_corner[i] == 1) { white_corner[j] = i; j++; }
	}*/
	//j = 0;
	//i = 1;
	//step1 find blue-white-red 0+2+4=6,2*4=8,2*4*0=0
	if ((flag_corner[1] == 1) && (CU.up[0][0] + CU.back[0][2] + CU.left[0][0] == 6))
	{
		//color_corner[0] = 1;
		if (CU.up[0][0] == 0) { U2(); R(); U2(); ANTI_R(); U2(); ANTI_F(); U(); F(); P_U2(); P_R(); P_U2(); P_ANTI_R(); P_U2(); P_ANTI_F(); P_U(); P_F();}
		else if (CU.left[0][0] == 0) { ANTI_F(); U2(); F(); P_ANTI_F(); P_U2(); P_F();}
		else if (CU.back[0][2] == 0) { R(); U2(); ANTI_R(); P_R(); P_U2(); P_ANTI_R();}
	}
	else if ((flag_corner[2] == 1) && (CU.up[0][2] + CU.back[0][0] + CU.right[0][2] == 6))
	{
		//color_corner[0] = 2;
	/*	if(CU.up[0][2]==0){ U(); R(); U2(); ANTI_R(); U2(); ANTI_F(); U(); F(); P_U(); P_R(); P_U2(); P_ANTI_R(); P_U2(); P_ANTI_F(); P_U(); P_F();}
		else if (CU.back[0][0] == 0) { ANTI_F(); U(); F(); }
		else if
		*/
		ANTI_U();
		P_ANTI_U();
		if (CU.up[0][0] == 0) { U2(); R(); U2(); ANTI_R(); U2(); ANTI_F(); U(); F(); P_U2(); P_R(); P_U2(); P_ANTI_R(); P_U2(); P_ANTI_F(); P_U(); P_F(); }
		else if (CU.left[0][0] == 0) { ANTI_F(); U2(); F(); P_ANTI_F(); P_U2(); P_F(); }
		else if (CU.back[0][2] == 0) { R(); U2(); ANTI_R(); P_R(); P_U2(); P_ANTI_R(); }
	}
	else if ((flag_corner[3] == 1) && (CU.up[2][0] + CU.front[0][0] + CU.left[0][2] == 6))
	{
		U();
		P_U();
		if (CU.up[0][0] == 0) { U2(); R(); U2(); ANTI_R(); U2(); ANTI_F(); U(); F(); P_U2(); P_R(); P_U2(); P_ANTI_R(); P_U2(); P_ANTI_F(); P_U(); P_F(); }
		else if (CU.left[0][0] == 0) { ANTI_F(); U2(); F(); P_ANTI_F(); P_U2(); P_F(); }
		else if (CU.back[0][2] == 0) { R(); U2(); ANTI_R(); P_R(); P_U2(); P_ANTI_R(); }
	}
	else if ((flag_corner[4] == 1) &&( CU.up[2][2] + CU.front[0][2] + CU.right[0][0] == 6))
	{
		U2();
		P_U2();
		if (CU.up[0][0] == 0) { U2(); R(); U2(); ANTI_R(); U2(); ANTI_F(); U(); F(); P_U2(); P_R(); P_U2(); P_ANTI_R(); P_U2(); P_ANTI_F(); P_U(); P_F(); }
		else if (CU.left[0][0] == 0) { ANTI_F(); U2(); F(); P_ANTI_F(); P_U2(); P_F(); }
		else if (CU.back[0][2] == 0) { R(); U2(); ANTI_R(); P_R(); P_U2(); P_ANTI_R(); }
	}
	else if ((flag_corner[5] == 1) && (CU.down[2][0] + CU.back[2][2] + CU.left[2][0] == 6))
	{
		ANTI_B();
		U();
		B();
		P_ANTI_B();
		P_U();
		P_B();
		if (CU.up[0][0] == 0) { U2(); R(); U2(); ANTI_R(); U2(); ANTI_F(); U(); F(); P_U2(); P_R(); P_U2(); P_ANTI_R(); P_U2(); P_ANTI_F(); P_U(); P_F(); }
		else if (CU.left[0][0] == 0) { ANTI_F(); U2(); F(); P_ANTI_F(); P_U2(); P_F(); }
		else if (CU.back[0][2] == 0) { R(); U2(); ANTI_R(); P_R(); P_U2(); P_ANTI_R(); }

	}
	else if ((flag_corner[6] == 1) && (CU.down[2][2] + CU.back[2][0] + CU.right[2][2] == 6))
	{
		//color_corner[0] = 6;
		ANTI_R();
		ANTI_U();
		R();
		P_ANTI_R();
		P_ANTI_U();
		P_R();
		if (CU.up[0][0] == 0) { U2(); R(); U2(); ANTI_R(); U2(); ANTI_F(); U(); F(); P_U2(); P_R(); P_U2(); P_ANTI_R(); P_U2(); P_ANTI_F(); P_U(); P_F(); }
		else if (CU.left[0][0] == 0) { ANTI_F(); U2(); F(); P_ANTI_F(); P_U2(); P_F(); }
		else if (CU.back[0][2] == 0) { R(); U2(); ANTI_R(); P_R(); P_U2(); P_ANTI_R(); }

	}
	else if ((flag_corner[7] == 1) && (CU.down[0][0] + CU.front[2][0] + CU.left[2][2] == 6))
	{
		//color_corner[0] = 7;
		F();
		U();
		ANTI_F();
		P_F();
		P_U();
		P_ANTI_F();
		if (CU.up[0][0] == 0) { U2(); R(); U2(); ANTI_R(); U2(); ANTI_F(); U(); F(); P_U2(); P_R(); P_U2(); P_ANTI_R(); P_U2(); P_ANTI_F(); P_U(); P_F(); }
		else if (CU.left[0][0] == 0) { ANTI_F(); U2(); F(); P_ANTI_F(); P_U2(); P_F(); }
		else if (CU.back[0][2] == 0) { R(); U2(); ANTI_R(); P_R(); P_U2(); P_ANTI_R(); }

	}
	else if ((flag_corner[8] == 1) && (CU.down[0][2] + CU.front[2][2] + CU.right[2][0] == 6))
	{
		if (CU.down[0][2] == 0) { ; }
		else{
			ANTI_F();
			U2();
			F();
			P_ANTI_F();
			P_U2();
			P_F();
			if (CU.up[0][0] == 0) { U2(); R(); U2(); ANTI_R(); U2(); ANTI_F(); U(); F(); P_U2(); P_R(); P_U2(); P_ANTI_R(); P_U2(); P_ANTI_F(); P_U(); P_F(); }
			else if (CU.left[0][0] == 0) { ANTI_F(); U2(); F(); P_ANTI_F(); P_U2(); P_F(); }
			else if (CU.back[0][2] == 0) { R(); U2(); ANTI_R(); P_R(); P_U2(); P_ANTI_R(); }
		}
	}
	for(i=1;i<9;i++)
	{
		flag_corner[i] = 0;
	}
	if (CU.up[0][0] * CU.back[0][2] * CU.left[0][0] == 0) { flag_corner[1] = 1; }
	if (CU.up[0][2] * CU.back[0][0] * CU.right[0][2] == 0) { flag_corner[2] = 1; }
	if (CU.up[2][0] * CU.front[0][0] * CU.left[0][2] == 0) { flag_corner[3] = 1; }
	if (CU.up[2][2] * CU.front[0][2] * CU.right[0][0] == 0) { flag_corner[4] = 1; }
	if (CU.down[2][0] * CU.back[2][2] * CU.left[2][0] == 0) { flag_corner[5] = 1; }
	if (CU.down[2][2] * CU.back[2][0] * CU.right[2][2] == 0) { flag_corner[6] = 1; }
	if (CU.down[0][0] * CU.front[2][0] * CU.left[2][2] == 0) { flag_corner[7] = 1; }
	if (CU.down[0][2] * CU.front[2][2] * CU.right[2][0] == 0) { flag_corner[8] = 1; }
	//step2 find blue-white-orange 0+2+5=7,0*2*5=0£¬2*5=10,xy+yz+zx=10
	if ((flag_corner[1] == 1) && (CU.up[0][0] * CU.back[0][2] + CU.left[0][0] * CU.back[0][2] + CU.left[0][0] * CU.up[0][0] == 10))
	{
		if (CU.up[0][0] == 0) { F(); U2(); ANTI_F(); U(); F(); ANTI_U(); ANTI_F(); P_F(); P_U2(); P_ANTI_F(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F();		}
		else if (CU.left[0][0] == 0) { ANTI_U(); F(); U(); ANTI_F(); P_ANTI_U(); P_F(); P_U(); P_ANTI_F();}
		else if (CU.back[0][2] == 0) { F(); ANTI_U(); ANTI_F();  P_F(); P_ANTI_U(); P_ANTI_F();}
	}
	else if ((flag_corner[2] == 1) && (CU.up[0][2]* CU.back[0][0] + CU.back[0][0]* CU.right[0][2] + CU.right[0][2]* CU.up[0][2] == 10))
	{
		ANTI_U();
		P_ANTI_U();
		if (CU.up[0][0] == 0) { F(); U2(); ANTI_F(); U(); F(); ANTI_U(); ANTI_F(); P_F(); P_U2(); P_ANTI_F(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F(); }
		else if (CU.left[0][0] == 0) { ANTI_U(); F(); U(); ANTI_F(); P_ANTI_U(); P_F(); P_U(); P_ANTI_F(); }
		else if (CU.back[0][2] == 0) { F(); ANTI_U(); ANTI_F();  P_F(); P_ANTI_U(); P_ANTI_F(); }
	}
	else if ((flag_corner[3] == 1) && (CU.up[2][0] * CU.front[0][0] + CU.front[0][0] * CU.left[0][2] + CU.left[0][2] * CU.up[2][0] == 10))
	{
		U();
		P_U();
		if (CU.up[0][0] == 0) { F(); U2(); ANTI_F(); U(); F(); ANTI_U(); ANTI_F(); P_F(); P_U2(); P_ANTI_F(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F(); }
		else if (CU.left[0][0] == 0) { ANTI_U(); F(); U(); ANTI_F(); P_ANTI_U(); P_F(); P_U(); P_ANTI_F(); }
		else if (CU.back[0][2] == 0) { F(); ANTI_U(); ANTI_F();  P_F(); P_ANTI_U(); P_ANTI_F(); }
	}
	else if ((flag_corner[4] == 1) && (CU.up[2][2] * CU.front[0][2] + CU.front[0][2] * CU.right[0][0] + CU.right[0][0] * CU.up[2][2] == 10))
	{
		U2();
		P_U2();
		if (CU.up[0][0] == 0) { F(); U2(); ANTI_F(); U(); F(); ANTI_U(); ANTI_F(); P_F(); P_U2(); P_ANTI_F(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F(); }
		else if (CU.left[0][0] == 0) { ANTI_U(); F(); U(); ANTI_F(); P_ANTI_U(); P_F(); P_U(); P_ANTI_F(); }
		else if (CU.back[0][2] == 0) { F(); ANTI_U(); ANTI_F();  P_F(); P_ANTI_U(); P_ANTI_F(); }
	}
	else if ((flag_corner[5] == 1) && (CU.down[2][0]* CU.back[2][2] + CU.back[2][2]* CU.left[2][0] + CU.left[2][0]* CU.down[2][0] == 10))
	{
		ANTI_B();
		U();
		B();
		P_ANTI_B();
		P_U();
		P_B();
		if (CU.up[0][0] == 0) { F(); U2(); ANTI_F(); U(); F(); ANTI_U(); ANTI_F(); P_F(); P_U2(); P_ANTI_F(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F(); }
		else if (CU.left[0][0] == 0) { ANTI_U(); F(); U(); ANTI_F(); P_ANTI_U(); P_F(); P_U(); P_ANTI_F(); }
		else if (CU.back[0][2] == 0) { F(); ANTI_U(); ANTI_F();  P_F(); P_ANTI_U(); P_ANTI_F(); }
	}
	else if ((flag_corner[6] == 1) && (CU.down[2][2]* CU.back[2][0] + CU.back[2][0]* CU.right[2][2] + CU.right[2][2]* CU.down[2][2] == 10))
	{
		ANTI_R();
		ANTI_U();
		R();
		P_ANTI_R();
		P_ANTI_U();
		P_R();
		if (CU.up[0][0] == 0) { F(); U2(); ANTI_F(); U(); F(); ANTI_U(); ANTI_F(); P_F(); P_U2(); P_ANTI_F(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F(); }
		else if (CU.left[0][0] == 0) { ANTI_U(); F(); U(); ANTI_F(); P_ANTI_U(); P_F(); P_U(); P_ANTI_F(); }
		else if (CU.back[0][2] == 0) { F(); ANTI_U(); ANTI_F();  P_F(); P_ANTI_U(); P_ANTI_F(); }
	}
	else if ((flag_corner[7] == 1) && (CU.down[0][0]*CU.front[2][0] + CU.front[2][0]* CU.left[2][2] + CU.left[2][2]* CU.down[0][0] == 10))
	{   
		if (CU.down[0][0] == 0) { ; }
		else {
			F();
			U();
			ANTI_F();
			P_F();
			P_U();
			P_ANTI_F();
			if (CU.up[0][0] == 0) { F(); U2(); ANTI_F(); U(); F(); ANTI_U(); ANTI_F(); P_F(); P_U2(); P_ANTI_F(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F(); }
			else if (CU.left[0][0] == 0) { ANTI_U(); F(); U(); ANTI_F(); P_ANTI_U(); P_F(); P_U(); P_ANTI_F(); }
			else if (CU.back[0][2] == 0) { F(); ANTI_U(); ANTI_F();  P_F(); P_ANTI_U(); P_ANTI_F(); }
		}
	}
	else if ((flag_corner[8] == 1) && (CU.down[0][2]* CU.front[2][2] + CU.front[2][2]* CU.right[2][0] + CU.right[2][0]* CU.down[0][2] == 10))
	{
		ANTI_F();
		U2();
		F();
		P_ANTI_F();
		P_U2();
		P_F();
		if (CU.up[0][0] == 0) { F(); U2(); ANTI_F(); U(); F(); ANTI_U(); ANTI_F(); P_F(); P_U2(); P_ANTI_F(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F(); }
		else if (CU.left[0][0] == 0) { ANTI_U(); F(); U(); ANTI_F(); P_ANTI_U(); P_F(); P_U(); P_ANTI_F(); }
		else if (CU.back[0][2] == 0) { F(); ANTI_U(); ANTI_F();  P_F(); P_ANTI_U(); P_ANTI_F(); }
	}
	for (i = 1; i < 9; i++)
	{
		flag_corner[i] = 0;
	}
	if (CU.up[0][0] * CU.back[0][2] * CU.left[0][0] == 0) { flag_corner[1] = 1; }
	if (CU.up[0][2] * CU.back[0][0] * CU.right[0][2] == 0) { flag_corner[2] = 1; }
	if (CU.up[2][0] * CU.front[0][0] * CU.left[0][2] == 0) { flag_corner[3] = 1; }
	if (CU.up[2][2] * CU.front[0][2] * CU.right[0][0] == 0) { flag_corner[4] = 1; }
	if (CU.down[2][0] * CU.back[2][2] * CU.left[2][0] == 0) { flag_corner[5] = 1; }
	if (CU.down[2][2] * CU.back[2][0] * CU.right[2][2] == 0) { flag_corner[6] = 1; }
	if (CU.down[0][0] * CU.front[2][0] * CU.left[2][2] == 0) { flag_corner[7] = 1; }
	if (CU.down[0][2] * CU.front[2][2] * CU.right[2][0] == 0) { flag_corner[8] = 1; }
	//step3 find green-white-red 0+3+4=7,0*3*4=0£¬3*4=12
	
	if ((flag_corner[1] == 1) && (CU.up[0][0] * CU.back[0][2] + CU.left[0][0] * CU.back[0][2] + CU.left[0][0] * CU.up[0][0] == 12))
	{
		if (CU.up[0][0] == 0) { U(); B(); U2(); ANTI_B(); U2(); ANTI_R(); U(); R(); P_U(); P_B(); P_U2(); P_ANTI_B(); P_U2(); P_ANTI_R(); P_U(); P_R();}
		else if (CU.left[0][0] == 0) { ANTI_R(); U(); R(); P_ANTI_R(); P_U(); P_R();}
		else if (CU.back[0][2] == 0) { U2(); B(); ANTI_U(); ANTI_B(); P_U2(); P_B(); P_ANTI_U(); P_ANTI_B();}
	}
	else if ((flag_corner[2] == 1) && (CU.up[0][2] * CU.back[0][0] + CU.back[0][0] * CU.right[0][2] + CU.right[0][2] * CU.up[0][2] == 12))
	{
		ANTI_U();
		P_ANTI_U();
		if (CU.up[0][0] == 0) { U(); B(); U2(); ANTI_B(); U2(); ANTI_R(); U(); R(); P_U(); P_B(); P_U2(); P_ANTI_B(); P_U2(); P_ANTI_R(); P_U(); P_R(); }
		else if (CU.left[0][0] == 0) { ANTI_R(); U(); R(); P_ANTI_R(); P_U(); P_R(); }
		else if (CU.back[0][2] == 0) { U2(); B(); ANTI_U(); ANTI_B(); P_U2(); P_B(); P_ANTI_U(); P_ANTI_B(); }
	}
	else if ((flag_corner[3] == 1) && (CU.up[2][0] * CU.front[0][0] + CU.front[0][0] * CU.left[0][2] + CU.left[0][2] * CU.up[2][0] == 12))
		{
			U();
			P_U();
			if (CU.up[0][0] == 0) { U(); B(); U2(); ANTI_B(); U2(); ANTI_R(); U(); R(); P_U(); P_B(); P_U2(); P_ANTI_B(); P_U2(); P_ANTI_R(); P_U(); P_R(); }
			else if (CU.left[0][0] == 0) { ANTI_R(); U(); R(); P_ANTI_R(); P_U(); P_R(); }
			else if (CU.back[0][2] == 0) { U2(); B(); ANTI_U(); ANTI_B(); P_U2(); P_B(); P_ANTI_U(); P_ANTI_B(); }
		}
	else if ((flag_corner[4] == 1) && (CU.up[2][2] * CU.front[0][2] + CU.front[0][2] * CU.right[0][0] + CU.right[0][0] * CU.up[2][2] == 12))
	{
		U2();
		P_U2();
		if (CU.up[0][0] == 0) { U(); B(); U2(); ANTI_B(); U2(); ANTI_R(); U(); R(); P_U(); P_B(); P_U2(); P_ANTI_B(); P_U2(); P_ANTI_R(); P_U(); P_R(); }
		else if (CU.left[0][0] == 0) { ANTI_R(); U(); R(); P_ANTI_R(); P_U(); P_R(); }
		else if (CU.back[0][2] == 0) { U2(); B(); ANTI_U(); ANTI_B(); P_U2(); P_B(); P_ANTI_U(); P_ANTI_B(); }
	}
	else if ((flag_corner[5] == 1) && (CU.down[2][0] * CU.back[2][2] + CU.back[2][2] * CU.left[2][0] + CU.left[2][0] * CU.down[2][0] == 12))
	{
		ANTI_B();
		U();
		B();
		P_ANTI_B();
		P_U();
		P_B();
		if (CU.up[0][0] == 0) { U(); B(); U2(); ANTI_B(); U2(); ANTI_R(); U(); R(); P_U(); P_B(); P_U2(); P_ANTI_B(); P_U2(); P_ANTI_R(); P_U(); P_R(); }
		else if (CU.left[0][0] == 0) { ANTI_R(); U(); R(); P_ANTI_R(); P_U(); P_R(); }
		else if (CU.back[0][2] == 0) { U2(); B(); ANTI_U(); ANTI_B(); P_U2(); P_B(); P_ANTI_U(); P_ANTI_B(); }
	}
	else if ((flag_corner[6] == 1) && (CU.down[2][2] * CU.back[2][0] + CU.back[2][0] * CU.right[2][2] + CU.right[2][2] * CU.down[2][2] == 12))
	{
		if (CU.down[2][2] == 0) { ; }
		else {
			ANTI_R();
			ANTI_U();
			R();
			P_ANTI_R();
			P_ANTI_U();
			P_R();
			if (CU.up[0][0] == 0) { U(); B(); U2(); ANTI_B(); U2(); ANTI_R(); U(); R(); P_U(); P_B(); P_U2(); P_ANTI_B(); P_U2(); P_ANTI_R(); P_U(); P_R(); }
			else if (CU.left[0][0] == 0) { ANTI_R(); U(); R(); P_ANTI_R(); P_U(); P_R(); }
			else if (CU.back[0][2] == 0) { U2(); B(); ANTI_U(); ANTI_B(); P_U2(); P_B(); P_ANTI_U(); P_ANTI_B(); }
		}
	}
	else if ((flag_corner[7] == 1) && (CU.down[0][0] * CU.front[2][0] + CU.front[2][0] * CU.left[2][2] + CU.left[2][2] * CU.down[0][0] == 12))
	{
		
			F();
			U();
			ANTI_F();
			P_F();
			P_U();
			P_ANTI_F();
			if (CU.up[0][0] == 0) { U(); B(); U2(); ANTI_B(); U2(); ANTI_R(); U(); R(); P_U(); P_B(); P_U2(); P_ANTI_B(); P_U2(); P_ANTI_R(); P_U(); P_R(); }
			else if (CU.left[0][0] == 0) { ANTI_R(); U(); R(); P_ANTI_R(); P_U(); P_R(); }
			else if (CU.back[0][2] == 0) { U2(); B(); ANTI_U(); ANTI_B(); P_U2(); P_B(); P_ANTI_U(); P_ANTI_B(); }
		
	}
	else if ((flag_corner[8] == 1) && (CU.down[0][2] * CU.front[2][2] + CU.front[2][2] * CU.right[2][0] + CU.right[2][0] * CU.down[0][2] == 12))
	{
		ANTI_F();
		U2();
		F();
		P_ANTI_F();
		P_U2();
		P_F();
		if (CU.up[0][0] == 0) { U(); B(); U2(); ANTI_B(); U2(); ANTI_R(); U(); R(); P_U(); P_B(); P_U2(); P_ANTI_B(); P_U2(); P_ANTI_R(); P_U(); P_R(); }
		else if (CU.left[0][0] == 0) { ANTI_R(); U(); R(); P_ANTI_R(); P_U(); P_R(); }
		else if (CU.back[0][2] == 0) { U2(); B(); ANTI_U(); ANTI_B(); P_U2(); P_B(); P_ANTI_U(); P_ANTI_B(); }
	}
	for (i = 1; i < 9; i++)
	{
		flag_corner[i] = 0;
	}
	if (CU.up[0][0] * CU.back[0][2] * CU.left[0][0] == 0) { flag_corner[1] = 1; }
	if (CU.up[0][2] * CU.back[0][0] * CU.right[0][2] == 0) { flag_corner[2] = 1; }
	if (CU.up[2][0] * CU.front[0][0] * CU.left[0][2] == 0) { flag_corner[3] = 1; }
	if (CU.up[2][2] * CU.front[0][2] * CU.right[0][0] == 0) { flag_corner[4] = 1; }
	if (CU.down[2][0] * CU.back[2][2] * CU.left[2][0] == 0) { flag_corner[5] = 1; }
	if (CU.down[2][2] * CU.back[2][0] * CU.right[2][2] == 0) { flag_corner[6] = 1; }
	if (CU.down[0][0] * CU.front[2][0] * CU.left[2][2] == 0) { flag_corner[7] = 1; }
	if (CU.down[0][2] * CU.front[2][2] * CU.right[2][0] == 0) { flag_corner[8] = 1; }
	
	//step4 find green-white-orange 0+3+5=8£¬3*5=15,0*3*5=0
	if ((flag_corner[1] == 1) && (CU.up[0][0] + CU.back[0][2] + CU.left[0][0] == 8))
	{
		//color_corner[0] = 1;
		if (CU.up[0][0] == 0) { L(); ANTI_U(); ANTI_L(); ANTI_B(); U2(); B(); P_L(); P_ANTI_U(); P_ANTI_L(); P_ANTI_B(); P_U2(); P_B();}
		else if (CU.left[0][0] == 0) { ANTI_U(); ANTI_B(); U(); B(); P_ANTI_U(); P_ANTI_B(); P_U(); P_B();}
		else if (CU.back[0][2] == 0) { U(); L(); ANTI_U(); ANTI_L(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L();}
	}
	else if ((flag_corner[2] == 1) && (CU.up[0][2] + CU.back[0][0] + CU.right[0][2] == 8))
	{
		//color_corner[0] = 2;
	/*	if(CU.up[0][2]==0){ U(); R(); U2(); ANTI_R(); U2(); ANTI_F(); U(); F(); P_U(); P_R(); P_U2(); P_ANTI_R(); P_U2(); P_ANTI_F(); P_U(); P_F();}
		else if (CU.back[0][0] == 0) { ANTI_F(); U(); F(); }
		else if
		*/
		ANTI_U();
		P_ANTI_U();
		if (CU.up[0][0] == 0) { L(); ANTI_U(); ANTI_L(); ANTI_B(); U2(); B(); P_L(); P_ANTI_U(); P_ANTI_L(); P_ANTI_B(); P_U2(); P_B(); }
		else if (CU.left[0][0] == 0) { ANTI_U(); ANTI_B(); U(); B(); P_ANTI_U(); P_ANTI_B(); P_U(); P_B(); }
		else if (CU.back[0][2] == 0) { U(); L(); ANTI_U(); ANTI_L(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L(); }
	}
	else if ((flag_corner[3] == 1) && (CU.up[2][0] + CU.front[0][0] + CU.left[0][2] == 8))
	{
		U();
		P_U();
		if (CU.up[0][0] == 0) { L(); ANTI_U(); ANTI_L(); ANTI_B(); U2(); B(); P_L(); P_ANTI_U(); P_ANTI_L(); P_ANTI_B(); P_U2(); P_B(); }
		else if (CU.left[0][0] == 0) { ANTI_U(); ANTI_B(); U(); B(); P_ANTI_U(); P_ANTI_B(); P_U(); P_B(); }
		else if (CU.back[0][2] == 0) { U(); L(); ANTI_U(); ANTI_L(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L(); }
	}
	else if ((flag_corner[4] == 1) && (CU.up[2][2] + CU.front[0][2] + CU.right[0][0] == 8))
	{
		U2();
		P_U2();
		if (CU.up[0][0] == 0) { L(); ANTI_U(); ANTI_L(); ANTI_B(); U2(); B(); P_L(); P_ANTI_U(); P_ANTI_L(); P_ANTI_B(); P_U2(); P_B(); }
		else if (CU.left[0][0] == 0) { ANTI_U(); ANTI_B(); U(); B(); P_ANTI_U(); P_ANTI_B(); P_U(); P_B(); }
		else if (CU.back[0][2] == 0) { U(); L(); ANTI_U(); ANTI_L(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L(); }
	}
	else if ((flag_corner[5] == 1) && (CU.down[2][0] + CU.back[2][2] + CU.left[2][0] == 8))
	{
		if (CU.down[2][0] == 0) { ; }
		else {
			ANTI_B();
			U();
			B();
			P_ANTI_B();
			P_U();
			P_B();
			if (CU.up[0][0] == 0) { L(); ANTI_U(); ANTI_L(); ANTI_B(); U2(); B(); P_L(); P_ANTI_U(); P_ANTI_L(); P_ANTI_B(); P_U2(); P_B(); }
			else if (CU.left[0][0] == 0) { ANTI_U(); ANTI_B(); U(); B(); P_ANTI_U(); P_ANTI_B(); P_U(); P_B(); }
			else if (CU.back[0][2] == 0) { U(); L(); ANTI_U(); ANTI_L(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L(); }
		}
	}
	else if ((flag_corner[6] == 1) && (CU.down[2][2] + CU.back[2][0] + CU.right[2][2] == 8))
	{
		//color_corner[0] = 6;
		ANTI_R();
		ANTI_U();
		R();
		P_ANTI_R();
		P_ANTI_U();
		P_R();
		if (CU.up[0][0] == 0) { L(); ANTI_U(); ANTI_L(); ANTI_B(); U2(); B(); P_L(); P_ANTI_U(); P_ANTI_L(); P_ANTI_B(); P_U2(); P_B(); }
		else if (CU.left[0][0] == 0) { ANTI_U(); ANTI_B(); U(); B(); P_ANTI_U(); P_ANTI_B(); P_U(); P_B(); }
		else if (CU.back[0][2] == 0) { U(); L(); ANTI_U(); ANTI_L(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L(); }

	}
	else if ((flag_corner[7] == 1) && (CU.down[0][0] + CU.front[2][0] + CU.left[2][2] == 8))
	{
		//color_corner[0] = 7;
		F();
		U();
		ANTI_F();
		P_F();
		P_U();
		P_ANTI_F();
		if (CU.up[0][0] == 0) { L(); ANTI_U(); ANTI_L(); ANTI_B(); U2(); B(); P_L(); P_ANTI_U(); P_ANTI_L(); P_ANTI_B(); P_U2(); P_B(); }
		else if (CU.left[0][0] == 0) { ANTI_U(); ANTI_B(); U(); B(); P_ANTI_U(); P_ANTI_B(); P_U(); P_B(); }
		else if (CU.back[0][2] == 0) { U(); L(); ANTI_U(); ANTI_L(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L(); }

	}
	else if ((flag_corner[8] == 1) && (CU.down[0][2] + CU.front[2][2] + CU.right[2][0] == 8))
	{
		if (CU.down[0][2] == 0) { ; }
		else {
			ANTI_F();
			U2();
			F();
			P_ANTI_F();
			P_U2();
			P_F();
			if (CU.up[0][0] == 0) { L(); ANTI_U(); ANTI_L(); ANTI_B(); U2(); B(); P_L(); P_ANTI_U(); P_ANTI_L(); P_ANTI_B(); P_U2(); P_B(); }
			else if (CU.left[0][0] == 0) { ANTI_U(); ANTI_B(); U(); B(); P_ANTI_U(); P_ANTI_B(); P_U(); P_B(); }
			else if (CU.back[0][2] == 0) { U(); L(); ANTI_U(); ANTI_L(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L(); }
		}
	}

	return;
}
void secondlayer() {
	//white=0 yellow=1 blue=2 green=3 red=4 orange=5
	//y-b 1*2=2
	//y-g 1*3=3 
	//y-r 1*4=4 
	//y-o 1*5=5
	//b-r 2*4=8
	//r-g 4*3=12
	//g-o 3*5=15
	//o-b 5*2=10
	//step 1 find blue-red
	if (CU.front[1][2] * CU.right[1][0] == 8) {
		if (CU.front[1][2] == 2) { ; }
		else { ANTI_F(); U(); F(); U(); R(); ANTI_U(); ANTI_R(); P_ANTI_F(); P_U(); P_F(); P_U(); P_R(); P_ANTI_U(); P_ANTI_R();
		}
	}
	else if (CU.right[1][2] * CU.back[1][0] == 8) {
		ANTI_R(); U(); R(); U(); B(); ANTI_U(); ANTI_B(); P_ANTI_R(); P_U(); P_R(); P_U(); P_B(); P_ANTI_U(); P_ANTI_B();
	}
	else if (CU.back[1][2] * CU.left[1][0] == 8) {
		ANTI_B(); U(); B(); U(); L(); ANTI_U(); ANTI_L(); P_ANTI_B(); P_U(); P_B(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L();
	}
	else if (CU.left[1][2] * CU.front[1][0] == 8) {
		ANTI_L(); U(); L(); U(); F(); ANTI_U(); ANTI_F(); P_ANTI_L(); P_U(); P_L(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F();
	}
	if (CU.front[0][1] * CU.up[2][1] == 8)
	{
		if (CU.front[0][1] == 2) { U(); R(); ANTI_U(); ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); P_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F();}
		else { U2(); ANTI_F(); U(); F(); U(); R(); ANTI_U(); ANTI_R();  P_U2(); P_ANTI_F(); P_U(); P_F(); P_U(); P_R(); P_ANTI_U(); P_ANTI_R();}
	}
	else if (CU.right[0][1] * CU.up[1][2] == 8)
	{
		if (CU.right[0][1] == 2) { U2(); R(); ANTI_U(); ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); P_U2(); P_R(); P_ANTI_U(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F();}
		else { ANTI_U(); ANTI_F(); U(); F(); U(); R(); ANTI_U(); ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F(); P_U(); P_R(); P_ANTI_U(); P_ANTI_R();}
	
	}
	else if (CU.back[0][1] * CU.up[0][1] == 8)
	{
		if (CU.back[0][1] == 2) { ANTI_U(); R(); ANTI_U(); ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F();}
		else { ANTI_F(); U(); F(); U(); R(); ANTI_U(); ANTI_R(); P_ANTI_F(); P_U(); P_F(); P_U(); P_R(); P_ANTI_U(); P_ANTI_R();}
	}
	else if (CU.left[0][1] * CU.up[1][0] == 8)
	{
		if (CU.left[0][1] == 2) { R(); ANTI_U(); ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); P_R(); P_ANTI_U(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F();
		}
		else { U(); ANTI_F(); U(); F(); U(); R(); ANTI_U(); ANTI_R(); P_U(); P_ANTI_F(); P_U(); P_F(); P_U(); P_R(); P_ANTI_U(); P_ANTI_R();}
	}
	//step 2 find red-green

/*	if (CU.front[1][2] * CU.right[1][0] == 8) {
		if (CU.front[1][2] == 2) { ; }
		else {
			ANTI_F(); U(); F(); U(); R(); ANTI_U(); ANTI_R(); P_ANTI_F(); P_U(); P_F(); P_U(); P_R(); P_ANTI_U(); P_ANTI_R();
		}
	}*/
    if (CU.right[1][2] * CU.back[1][0] == 12) {
		if (CU.right[1][2] == 4) { ; }
		else { ANTI_R(); U(); R(); U(); B(); ANTI_U(); ANTI_B(); P_ANTI_R(); P_U(); P_R(); P_U(); P_B(); P_ANTI_U(); P_ANTI_B(); }
	}
	else if (CU.back[1][2] * CU.left[1][0] == 12) {
		ANTI_B(); U(); B(); U(); L(); ANTI_U(); ANTI_L(); P_ANTI_B(); P_U(); P_B(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L();
	}
	else if (CU.left[1][2] * CU.front[1][0] == 12) {
		ANTI_L(); U(); L(); U(); F(); ANTI_U(); ANTI_F(); P_ANTI_L(); P_U(); P_L(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F();
	}
	if (CU.front[0][1] * CU.up[2][1] == 12)
	{
		if (CU.front[0][1] == 4) {  B(); ANTI_U(); ANTI_B(); ANTI_U(); ANTI_R(); U(); R(); P_B(); P_ANTI_U(); P_ANTI_B(); P_ANTI_U(); P_ANTI_R(); P_U(); P_R(); }
		else { U(); ANTI_R(); U(); R(); U(); B(); ANTI_U(); ANTI_B(); P_U(); P_ANTI_R(); P_U(); P_R(); P_U(); P_B(); P_ANTI_U(); P_ANTI_B();}
	}
	else if (CU.right[0][1] * CU.up[1][2] == 12)
	{
		if (CU.right[0][1] == 4) { U(); B(); ANTI_U(); ANTI_B(); ANTI_U(); ANTI_R(); U(); R(); P_U(); P_B(); P_ANTI_U(); P_ANTI_B(); P_ANTI_U(); P_ANTI_R(); P_U(); P_R(); }
		else { U2(); ANTI_R(); U(); R(); U(); B(); ANTI_U(); ANTI_B(); P_U2(); P_ANTI_R(); P_U(); P_R(); P_U(); P_B(); P_ANTI_U(); P_ANTI_B(); }

	}
	else if (CU.back[0][1] * CU.up[0][1] == 12)
	{
		if (CU.back[0][1] == 4) { U2(); B(); ANTI_U(); ANTI_B(); ANTI_U(); ANTI_R(); U(); R(); P_U2(); P_B(); P_ANTI_U(); P_ANTI_B(); P_ANTI_U(); P_ANTI_R(); P_U(); P_R(); }
		else { ANTI_U(); ANTI_R(); U(); R(); U(); B(); ANTI_U(); ANTI_B(); P_ANTI_U(); P_ANTI_R(); P_U(); P_R(); P_U(); P_B(); P_ANTI_U(); P_ANTI_B(); }
	}
	else if (CU.left[0][1] * CU.up[1][0] == 12)
	{
		if (CU.left[0][1] == 4) {ANTI_U(); B(); ANTI_U(); ANTI_B(); ANTI_U(); ANTI_R(); U(); R(); P_ANTI_U(); P_B(); P_ANTI_U(); P_ANTI_B(); P_ANTI_U(); P_ANTI_R(); P_U(); P_R();}
		else {  ANTI_R(); U(); R(); U(); B(); ANTI_U(); ANTI_B(); P_ANTI_R(); P_U(); P_R(); P_U(); P_B(); P_ANTI_U(); P_ANTI_B(); }
	}
	//step 3 find green-orange
	/*if (CU.right[1][2] * CU.back[1][0] == 12) {
		ANTI_R(); U(); R(); U(); B(); ANTI_U(); ANTI_B(); P_ANTI_R(); P_U(); P_R(); P_U(); P_B(); P_ANTI_U(); P_ANTI_B();
	}*/
    if (CU.back[1][2] * CU.left[1][0] == 15) {
		if (CU.back[1][2] == 3) { ; }
		else {
			ANTI_B(); U(); B(); U(); L(); ANTI_U(); ANTI_L(); P_ANTI_B(); P_U(); P_B(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L();
		}
	}
	else if (CU.left[1][2] * CU.front[1][0] == 15) {
		ANTI_L(); U(); L(); U(); F(); ANTI_U(); ANTI_F(); P_ANTI_L(); P_U(); P_L(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F();
	}

	if (CU.front[0][1] * CU.up[2][1] == 15)
	{
		if (CU.front[0][1] == 3) { ANTI_U(); L(); ANTI_U(); ANTI_L(); ANTI_U(); ANTI_B(); U(); B(); P_ANTI_U(); P_L(); P_ANTI_U(); P_ANTI_L(); P_ANTI_U(); P_ANTI_B(); P_U(); P_B();}
		else { ANTI_B(); U(); B(); U(); L(); ANTI_U(); ANTI_L();  P_ANTI_B(); P_U(); P_B(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L();}
	}
	else if (CU.right[0][1] * CU.up[1][2] == 15)
	{
		if (CU.right[0][1] == 3) { L(); ANTI_U(); ANTI_L(); ANTI_U(); ANTI_B(); U(); B();  P_L(); P_ANTI_U(); P_ANTI_L(); P_ANTI_U(); P_ANTI_B(); P_U(); P_B(); }
		else { U(); ANTI_B(); U(); B(); U(); L(); ANTI_U(); ANTI_L(); P_U();  P_ANTI_B(); P_U(); P_B(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L(); }

	}
	else if (CU.back[0][1] * CU.up[0][1] == 15)
	{
		if (CU.back[0][1] == 3) { U(); L(); ANTI_U(); ANTI_L(); ANTI_U(); ANTI_B(); U(); B(); P_U();  P_L(); P_ANTI_U(); P_ANTI_L(); P_ANTI_U(); P_ANTI_B(); P_U(); P_B(); }
		else { U2(); ANTI_B(); U(); B(); U(); L(); ANTI_U(); ANTI_L(); P_U2();  P_ANTI_B(); P_U(); P_B(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L(); }
	}
	else if (CU.left[0][1] * CU.up[1][0] == 15)
	{
		if (CU.left[0][1] == 3) { U2(); L(); ANTI_U(); ANTI_L(); ANTI_U(); ANTI_B(); U(); B(); P_U2();  P_L(); P_ANTI_U(); P_ANTI_L(); P_ANTI_U(); P_ANTI_B(); P_U(); P_B(); }
		else { ANTI_U(); ANTI_B(); U(); B(); U(); L(); ANTI_U(); ANTI_L(); P_ANTI_U();  P_ANTI_B(); P_U(); P_B(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L(); }
	}
	//step 4 find orange-blue
	/*if (CU.back[1][2] * CU.left[1][0] == 15) {
		ANTI_B(); U(); B(); U(); L(); ANTI_U(); ANTI_L(); P_ANTI_B(); P_U(); P_B(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L();
	}*/
    if (CU.left[1][2] * CU.front[1][0] == 10) {
		if (CU.left[1][2] == 5) { ; }
		else {
			ANTI_L(); U(); L(); U(); F(); ANTI_U(); ANTI_F(); P_ANTI_L(); P_U(); P_L(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F();
		}
	}

	if (CU.front[0][1] * CU.up[2][1] == 10)
	{
		if (CU.front[0][1] == 5) { U2(); F(); ANTI_U(); ANTI_F(); ANTI_U(); ANTI_L(); U(); L(); P_U2(); P_F(); P_ANTI_U(); P_ANTI_F(); P_ANTI_U(); P_ANTI_L(); P_U(); P_L();}
		else { ANTI_U(); ANTI_L(); U(); L(); U(); F(); ANTI_U(); ANTI_F(); P_ANTI_U(); P_ANTI_L(); P_U(); P_L(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F();}
	}
	else if (CU.right[0][1] * CU.up[1][2] == 10)
	{
		if (CU.right[0][1] == 5) { ANTI_U(); F(); ANTI_U(); ANTI_F(); ANTI_U(); ANTI_L(); U(); L(); P_ANTI_U(); P_F(); P_ANTI_U(); P_ANTI_F(); P_ANTI_U(); P_ANTI_L(); P_U(); P_L(); }
		else {  ANTI_L(); U(); L(); U(); F(); ANTI_U(); ANTI_F(); P_ANTI_L(); P_U(); P_L(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F(); }

	}
	else if (CU.back[0][1] * CU.up[0][1] == 10)
	{
		if (CU.back[0][1] == 5) {  F(); ANTI_U(); ANTI_F(); ANTI_U(); ANTI_L(); U(); L(); P_F(); P_ANTI_U(); P_ANTI_F(); P_ANTI_U(); P_ANTI_L(); P_U(); P_L(); }
		else { U(); ANTI_L(); U(); L(); U(); F(); ANTI_U(); ANTI_F(); P_U(); P_ANTI_L(); P_U(); P_L(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F(); }
	}
	else if (CU.left[0][1] * CU.up[1][0] == 10)
	{
		if (CU.left[0][1] == 5) { U(); F(); ANTI_U(); ANTI_F(); ANTI_U(); ANTI_L(); U(); L(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F(); P_ANTI_U(); P_ANTI_L(); P_U(); P_L(); }
		else { U2(); ANTI_L(); U(); L(); U(); F(); ANTI_U(); ANTI_F(); P_U2(); P_ANTI_L(); P_U(); P_L(); P_U(); P_F(); P_ANTI_U(); P_ANTI_F(); }
	}
	return;
}
void topcross() {
	//case 1 cross done
	if (CU.up[0][1] + CU.up[1][0] + CU.up[1][2] + CU.up[2][1] == 4) { return; }
	//case 2 half cross done,looks like 'L'
    if (CU.up[0][1] + CU.up[1][0] == 2) {
		ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); R(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F(); P_R(); return;
	}
	else if (CU.up[1][0] + CU.up[2][1] == 2) {
		U(); ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); R(); P_U(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F(); P_R(); return;

	}
	else if (CU.up[2][1] + CU.up[1][2] == 2) {
		U2(); ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); R(); P_U2(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F(); P_R(); return;

	}
	else if (CU.up[1][2] + CU.up[0][1] == 2) {
		ANTI_U(); ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); R(); P_ANTI_U(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F(); P_R(); return;

	}
	//case 3 a line done,looks like '1'
	if (CU.up[0][1] + CU.up[2][1] == 2) {
		U(); ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); R(); P_U(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F(); P_R();
		U2(); ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); R(); P_U2(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F(); P_R(); return;
	}
	else if (CU.up[1][0] + CU.up[1][2] == 2)
	{
		ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); R(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F(); P_R();
		U2(); ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); R(); P_U2(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F(); P_R(); return;
	}
	//case 4 only middle is yellow
	ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); R(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F(); P_R();
	ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); R(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F(); P_R();
	U2(); ANTI_R(); ANTI_U(); ANTI_F(); U(); F(); R(); P_U2(); P_ANTI_R(); P_ANTI_U(); P_ANTI_F(); P_U(); P_F(); P_R(); 
	return;
	


}
void topcorner() {
	//step 1 find y-g-o
	if (CU.up[0][0] * CU.back[0][2] * CU.left[0][0] == 15) { ; }
	else if (CU.up[0][2] * CU.back[0][0] * CU.right[0][2] == 15) { ANTI_U(); P_ANTI_U(); }
	else if (CU.up[2][0] * CU.front[0][0] * CU.left[0][2] == 15) { U(); P_U(); }
	else if (CU.up[2][2] * CU.front[0][2] * CU.right[0][0] == 15) { U2(); P_U2(); }
	//step 2 now there is 6 cases
    //case 1:
	if ((CU.up[0][2] * CU.back[0][0] * CU.right[0][2] == 12) && (CU.up[2][0] * CU.front[0][0] * CU.left[0][2] == 10) && (CU.up[2][2] * CU.front[0][2] * CU.right[0][0] == 8)) { ; }
	//case 2:
	else if ((CU.up[0][2] * CU.back[0][0] * CU.right[0][2] == 12) && (CU.up[2][0] * CU.front[0][0] * CU.left[0][2] == 8) && (CU.up[2][2] * CU.front[0][2] * CU.right[0][0] == 10))
	{
		ANTI_U(); R(); ANTI_L(); U(); ANTI_R(); ANTI_U(); L(); U(); R(); ANTI_U(); ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_L(); P_U(); P_ANTI_R(); P_ANTI_U(); P_L(); P_U(); P_R(); P_ANTI_U(); P_ANTI_R();
	}
	//case 3:
	else if ((CU.up[0][2] * CU.back[0][0] * CU.right[0][2] == 10) && (CU.up[2][0] * CU.front[0][0] * CU.left[0][2] == 8) && (CU.up[2][2] * CU.front[0][2] * CU.right[0][0] == 12))
	{
		L(); U(); ANTI_L(); ANTI_U(); ANTI_R(); U(); L(); ANTI_U(); R(); ANTI_L(); P_L(); P_U(); P_ANTI_L(); P_ANTI_U(); P_ANTI_R(); P_U(); P_L(); P_ANTI_U(); P_R(); P_ANTI_L();
	}
	//case 4:
	else if ((CU.up[0][2] * CU.back[0][0] * CU.right[0][2] == 10) && (CU.up[2][0] * CU.front[0][0] * CU.left[0][2] == 12) && (CU.up[2][2] * CU.front[0][2] * CU.right[0][0] == 8))
	{
		L(); ANTI_R(); U(); ANTI_L(); ANTI_U(); R(); U(); L(); ANTI_U(); ANTI_L(); P_L(); P_ANTI_R(); P_U(); P_ANTI_L(); P_ANTI_U(); P_R(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L();
		ANTI_U(); R(); ANTI_L(); U(); ANTI_R(); ANTI_U(); L(); U(); R(); ANTI_U(); ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_L(); P_U(); P_ANTI_R(); P_ANTI_U(); P_L(); P_U(); P_R(); P_ANTI_U(); P_ANTI_R();
	}
	//case 5:
	else if ((CU.up[0][2] * CU.back[0][0] * CU.right[0][2] == 8) && (CU.up[2][0] * CU.front[0][0] * CU.left[0][2] == 12) && (CU.up[2][2] * CU.front[0][2] * CU.right[0][0] == 10))
	{
		L(); ANTI_R(); U(); ANTI_L(); ANTI_U(); R(); U(); L(); ANTI_U(); ANTI_L(); P_L(); P_ANTI_R(); P_U(); P_ANTI_L(); P_ANTI_U(); P_R(); P_U(); P_L(); P_ANTI_U(); P_ANTI_L();
	}
	//case 6:
	else {
		ANTI_U(); B(); ANTI_F(); U(); ANTI_B(); ANTI_U(); F(); U(); B(); ANTI_U(); ANTI_B(); P_ANTI_U(); P_B(); P_ANTI_F(); P_U(); P_ANTI_B(); P_ANTI_U(); P_F(); P_U(); P_B(); P_ANTI_U(); P_ANTI_B();
	}
	return;

}
void topcomplete() {
	// case 1: complete
	if (CU.up[0][0] + CU.up[0][2] + CU.up[2][0] + CU.up[2][2] == 4) { return; }
	//case 2: no yellow in corner
	if ((CU.up[0][0] != 1) && (CU.up[0][2] != 1) && (CU.up[2][0] != 1) && (CU.up[2][2] != 1))
	{
		ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); U2(); R(); U2(); P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U2();
	}
	//case 3: 1 yellow in corner
	if ((CU.up[0][0] == 1) && (CU.up[0][2] != 1) && (CU.up[2][0] != 1) && (CU.up[2][2] != 1)) { ; }
	else if ((CU.up[0][0] != 1) && (CU.up[0][2] == 1) && (CU.up[2][0] != 1) && (CU.up[2][2] != 1)) { ANTI_U(); P_ANTI_U(); }
	else if ((CU.up[0][0] != 1) && (CU.up[0][2] != 1) && (CU.up[2][0] == 1) && (CU.up[2][2] != 1)) { U(); P_U(); }
	else if ((CU.up[0][0] != 1) && (CU.up[0][2] != 1) && (CU.up[2][0] != 1) && (CU.up[2][2] == 1)) { U2(); P_U2(); }

	if (CU.front[0][0] == 1) { ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); U2(); R(); U2(); P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U2(); return; }
	else if (CU.front[0][2] == 1) { ANTI_U(); R(); U(); ANTI_R(); U(); R(); U2(); ANTI_R(); U2(); P_ANTI_U(); P_R(); P_U(); P_ANTI_R(); P_U(); P_R(); P_U2(); P_ANTI_R(); P_U2(); return; }
	//case 4 2 yellow in corner
	if (CU.up[0][0] + CU.up[0][2] == 2) { ; }
	else if (CU.up[0][2] + CU.up[2][2] == 2) { ANTI_U(); P_ANTI_U(); }
	else if (CU.up[0][0] + CU.up[2][0] == 2) { U(); P_U(); }
	else if (CU.up[2][0] + CU.up[2][2] == 2) { U2(); P_U2(); }
	else if (CU.up[0][2] + CU.up[2][0] == 2) {
		if (CU.right[0][0] == 1) {
			ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); U2(); R(); U2(); P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U2();
			U(); P_U();
			R(); U(); ANTI_R(); U(); R(); U2(); ANTI_R(); U2(); P_R(); P_U(); P_ANTI_R(); P_U(); P_R(); P_U2(); P_ANTI_R(); P_U2();
			return;
		}
		else {
			U2(); P_U2();
			ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); U2(); R(); U2(); P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U2();
			U(); P_U();
			R(); U(); ANTI_R(); U(); R(); U2(); ANTI_R(); U2(); P_R(); P_U(); P_ANTI_R(); P_U(); P_R(); P_U2(); P_ANTI_R(); P_U2();
			return;

		}
	}
	else if (CU.up[0][0] + CU.up[2][2] == 2) {
		U(); P_U();
		if (CU.right[0][0] == 1) {
			ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); U2(); R(); U2(); P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U2();
			U(); P_U();
			R(); U(); ANTI_R(); U(); R(); U2(); ANTI_R(); U2(); P_R(); P_U(); P_ANTI_R(); P_U(); P_R(); P_U2(); P_ANTI_R(); P_U2();
			return;
		}
		else {
			U2(); P_U2();
			ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); U2(); R(); U2(); P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U2();
			U(); P_U();
			R(); U(); ANTI_R(); U(); R(); U2(); ANTI_R(); U2(); P_R(); P_U(); P_ANTI_R(); P_U(); P_R(); P_U2(); P_ANTI_R(); P_U2();
			return;

		}

	}
	//
	if (CU.up[0][0] + CU.up[0][2] == 2)
	{
		if (CU.front[0][0] == 1) {
			R(); U(); ANTI_R(); U(); R(); U2(); ANTI_R(); U2(); P_R(); P_U(); P_ANTI_R(); P_U(); P_R(); P_U2(); P_ANTI_R(); P_U2();
			U2(); P_U2();
			ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); U2(); R(); U2(); P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U2();
		}
		else {
			U(); P_U();
			ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); U2(); R(); U2(); P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U2();
			R(); U(); ANTI_R(); U(); R(); U2(); ANTI_R(); U2(); P_R(); P_U(); P_ANTI_R(); P_U(); P_R(); P_U2(); P_ANTI_R(); P_U2();
		}
		return;
	}
}

	void finishcube(){
		if (CU.front[0][0] != 2) { U(); P_U(); }
		if (CU.front[0][0] != 2) { U(); P_U(); }
		if (CU.front[0][0] != 2) { U(); P_U(); }
		
		 if (CU.front[0][1] != 2)
		{ 
			if (CU.right[0][1] == 2) {
				R(); U2(); ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); ANTI_U(); ANTI_R(); U2(); R(); U(); ANTI_R(); U(); R();
			    P_R(); P_U2(); P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U(); P_ANTI_R(); P_U(); P_R();
				U(); P_U();
              }
			else if (CU.back[0][1] == 2) {
				ANTI_U(); P_ANTI_U();
				ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); U2(); R(); U(); R(); U(); ANTI_R(); U(); R(); U2(); ANTI_R();
				P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U(); P_R(); P_U(); P_ANTI_R(); P_U(); P_R(); P_U2(); P_ANTI_R(); 

			}
			else if (CU.left[0][1] == 2) {
				U(); P_U();
				ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); U2(); R(); U(); R(); U(); ANTI_R(); U(); R(); U2(); ANTI_R(); ANTI_U();
				P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U(); P_R(); P_U(); P_ANTI_R(); P_U(); P_R(); P_U2(); P_ANTI_R(); P_ANTI_U();
				ANTI_U(); P_ANTI_U();
			}
		}
		 if (CU.front[0][1] == 2) {
			 if (CU.right[0][1] == 4) { return; }
			 else if (CU.right[0][1] == 3) {
				 ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); U2(); R(); U(); R(); U(); ANTI_R(); U(); R(); U2(); ANTI_R(); ANTI_U();
				 P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U(); P_R(); P_U(); P_ANTI_R(); P_U(); P_R(); P_U2(); P_ANTI_R(); P_ANTI_U();
				 return;
			 }
			 else if (CU.right[0][1] == 5) {
				 U(); R(); U2(); ANTI_R(); ANTI_U(); R(); ANTI_U(); ANTI_R(); ANTI_U(); ANTI_R(); U2(); R(); U(); ANTI_R(); U(); R();
				 P_U(); P_R(); P_U2(); P_ANTI_R(); P_ANTI_U(); P_R(); P_ANTI_U(); P_ANTI_R(); P_ANTI_U(); P_ANTI_R(); P_U2(); P_R(); P_U(); P_ANTI_R(); P_U(); P_R();
				 return;
			 }
		 }
		return;
}



int main() {
	int a, b, c, d, e, f, g, h, i, j, k;
	int mark_angle=0;
	int mark;
	int triger=1;
	//int mark = 0;
	//white=0 yellow=1 blue=2 green=3 red=4 orange=5
	CU.down[0][0] = 0;
	CU.down[0][1] = 0;
	CU.down[0][2] = 0;
	CU.down[1][0] = 0;
	CU.down[1][1] = 0;
	CU.down[1][2] = 0;
	CU.down[2][0] = 0;
	CU.down[2][1] = 0;
	CU.down[2][2] = 0;

	CU.up[0][0] = 2;
	CU.up[0][1] = 1;
	CU.up[0][2] = 1;
	CU.up[1][0] = 1;
	CU.up[1][1] = 1;
	CU.up[1][2] = 2;
	CU.up[2][0] = 3;
	CU.up[2][1] = 3;
	CU.up[2][2] = 1;

	CU.front[0][0] = 4;
	CU.front[0][1] = 1;
	CU.front[0][2] = 3;
	CU.front[1][0] = 2;
	CU.front[1][1] = 2;
	CU.front[1][2] = 2;
	CU.front[2][0] = 2;
	CU.front[2][1] = 2;
	CU.front[2][2] = 2;

	CU.back[0][0] = 2;
	CU.back[0][1] = 4;
	CU.back[0][2] = 4;
	CU.back[1][0] = 3;
	CU.back[1][1] = 3;
	CU.back[1][2] = 3;
	CU.back[2][0] = 3;
	CU.back[2][1] = 3;
	CU.back[2][2] = 3;

	CU.right[0][0] = 5;
	CU.right[0][1] = 1;
	CU.right[0][2] = 5;
	CU.right[1][0] = 4;
	CU.right[1][1] = 4;
	CU.right[1][2] = 4;
	CU.right[2][0] = 4;
	CU.right[2][1] = 4;
	CU.right[2][2] = 4;

	CU.left[0][0] = 1;
	CU.left[0][1] = 5;
	CU.left[0][2] = 1;
	CU.left[1][0] = 5;
	CU.left[1][1] = 5;
	CU.left[1][2] = 5;
	CU.left[2][0] = 5;
	CU.left[2][1] = 5;
	CU.left[2][2] = 5;


	down_cross();
	a = CU.down[0][1];
	b = CU.down[1][0];
	c = CU.down[1][2];
	d = CU.down[2][1];
	e = CU.front[2][1];
	f = CU.right[2][1];
	g = CU.back[2][1];
	h = CU.left[2][1];
	printf("\n");

	//printf("%d, %d, %d, %d, %d, %d, %d, %d", a, b, c, d, e, f, g, h);
	completedown();
	a = CU.down[0][0];
	b = CU.down[0][1];
	c = CU.down[0][2];
	d = CU.down[1][0];
	e = CU.down[1][2];
	f = CU.down[2][0];
	g = CU.down[2][1];
	h = CU.down[2][2];
	printf("\n");

	//printf("%d, %d, %d, %d, %d, %d, %d, %d", a, b, c, d, e, f, g, h);
	secondlayer();
		printf("\n");
	topcross();
	printf("\n");
	topcorner();
	printf("\n");
	topcomplete();
	printf("\n");
	finishcube();
	printf("\n");
	checkcube();
//ºÏ²¢¶à²½×ªÍ¬Ò»¸öÃæµÄ²Ù×÷

	while (triger) {
		for (i = 0; i < flag; i++) {
			mark_angle = clockwise_angle_div90[i];
			for (j = 1; j <= flag - i; j++)
				if (operate[i] != operate[i + j]) { j--; break; }
			if (j != 0) {
				for (k = 1; k <= j; k++)
				{
					mark_angle += clockwise_angle_div90[i + k];
					operate[i + k] = 0;
					clockwise_angle_div90[i + k] = 0;
				}
				clockwise_angle_div90[i] = mark_angle % 4;
			}
		}
		//È¥µôÊý×éÀïµÄ0£»
		mark = 0;
		for (i = 0; i <= flag; i++) {
			if (clockwise_angle_div90[i] != 0) {
				operate[mark] = operate[i];
				clockwise_angle_div90[mark] = clockwise_angle_div90[i];
				mark++;
			}

		}
		flag = mark-1;
		triger = 0;
		for(i=0;i<flag;i++)
		{
			if (operate[i] == operate[i + 1]) { triger = 1; break; }
		}
	}
	printf("steps: %d\n", mark);
	for (i = 0; i < mark; i++) {
		printf("%d : ", i);
		switch (operate[i]) {
		case 1: {
			   if (clockwise_angle_div90[i] == 1) { printf("D "); } 
			   else if (clockwise_angle_div90[i] == 2) { printf("D2 "); }
			   else if (clockwise_angle_div90[i] == 3) { printf("ANTI_D "); }
			   break;
		}
		case 2 :{ 
			if (clockwise_angle_div90[i] == 1) { printf("U "); }
			else if (clockwise_angle_div90[i] == 2) { printf("U2 "); }
			else if (clockwise_angle_div90[i] == 3) { printf("ANTI_U "); }
			break;
		}
		case 3 :{ 
			if (clockwise_angle_div90[i] == 1) { printf("F "); }
			else if (clockwise_angle_div90[i] == 2) { printf("F2 "); }
			else if (clockwise_angle_div90[i] == 3) { printf("ANTI_F "); }
			break;
		}
		case 4 :{ 
			if (clockwise_angle_div90[i] == 1) { printf("B "); }
			else if (clockwise_angle_div90[i] == 2) { printf("B2 "); }
			else if (clockwise_angle_div90[i] == 3) { printf("ANTI_B "); }
			break;
		}
		case 5 :{ 
			if (clockwise_angle_div90[i] == 1) { printf("R "); }
			else if (clockwise_angle_div90[i] == 2) { printf("R2 "); }
			else if (clockwise_angle_div90[i] == 3) { printf("ANTI_R "); }
			break;
		}
		case 6 : { 
			if (clockwise_angle_div90[i] == 1) { printf("L "); }
			else if (clockwise_angle_div90[i] == 2) { printf("L2 "); }
			else if (clockwise_angle_div90[i] == 3) { printf("ANTI_L "); }
			break;
		}
			default: break;

		}
		printf("\n");
	}

	//if ((4 % 4) == 4) printf("asdasdad");

	return 0;
}